<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_xscale=1  //used for which way the player is facing
image_yscale=1

//the variable used to tell if you are attacking
attack=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement


//Basic movement code
if attack=0{
    hspeed+=( (keyboard_check(ord("D"))-keyboard_check(ord("A")))*5 -hspeed)/5
    vspeed+=( (keyboard_check(ord("S"))-keyboard_check(ord("W")))*5 -vspeed)/5
    image_speed=clamp( (abs(hspeed)+abs(vspeed))/10,0,1 )
    
    if sprite_index!=sprPlayer{
        sprite_index=sprPlayer
    }
}

//Change direction of character
if (keyboard_check(ord("D")) xor keyboard_check(ord("A"))){
    //You need an xor because if you were to use an or, and both keys were pressed, the image_xscale would equal 0,
        //Causing your player to go invisible!
    image_xscale=(keyboard_check(ord("D"))-keyboard_check(ord("A")))
}


//Basic collisions
if place_meeting(x+hspeed,y,objSolid){
    move_contact_solid(point_direction(x,y,x+hspeed,y),hspeed)
    hspeed=0
}
if place_meeting(x,y+vspeed,objSolid){
    move_contact_solid(point_direction(x,y,x,y+vspeed),vspeed)
    vspeed=0
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking

//Check to see if you press the attack button
if keyboard_check_released(ord("F")){
    attack=15
    image_index=0
}

if attack&gt;0{
    //slow the player down
    image_speed=0.5
    hspeed+=( 0 -hspeed)/5
    vspeed+=( 0 -vspeed)/5
    
    //change sprite to the attacking sprite
    if sprite_index!=sprPlayerAttack{
        sprite_index=sprPlayerAttack
    }
    
    //tick down the "attack" variable
    attack--
    if attack==0{   
        //create the bullet
        nn=instance_create(x,y,objBullet)
        nn.direction=point_direction(x,y,x+image_xscale,y)
        nn.speed=15
        nn.image_xscale=3
        nn.image_yscale=3
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
