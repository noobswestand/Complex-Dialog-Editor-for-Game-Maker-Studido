<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNode</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
color=12684883

alpha=1
alphaCheck=1

name="Node"
type=-1
pid=-1
selectR=0


w=250
h=150

outDrag=-1
outDrag2=false
for(i=0;i&lt;15;i++){
    in[i]=-1
    out[i]=-1
    path[i]=-1;
}
on0=-1
on1=-1
saved=false

inx=0
iny=0
inw=45
inh=20
outx=0
outy=0
outw=45
outh=20


miw=150
mih=75
maw=500
mah=400

hold=-1
range=5
click=0
click2=0
drag=false
X=0
Y=0
X2=0
Y2=0


start=false

convo=-1


	color_type[0]=$71ae68; // textbox
color_type[1]=$5353c1; // scriptbox
color_type[2]=$c18e53; // switchbox
color_type[3]=$d26db4; // checkbox
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///textBox

text=""
select=0
blink=0
scroll=0

alarm[0]=room_speed/2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switchBox

for(i=0;i&lt;15;i++){
    select0[i]=0
    selectT[i]=""
    selectS[i]=0
}
switchCount=1


//export
//pon0=-1
//pon1=-1
ponWrote=false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checkBox

checkS=0
checkT=0
checkM=6
checkH=0
check[0]="=="
check[1]="&lt;"
check[2]="&gt;"
check[3]="!="
check[4]="&lt;="
check[5]="&gt;="

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NewText

strPos0=0
strPos1=0

backDelay=0
arrowDelay=0
clickDelay=-1
clickDelayO=-1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

objControl.nodeCount--
objControl.nodeList[| pid]=-1


if ds_list_find_index(objControl.deactL,id)&gt;=0{
    ds_list_delete(objControl.deactL,ds_list_find_index(objControl.deactL,id))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink
alarm[0]=room_speed/2
blink=!blink
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checkConnections

for(i=0;i&lt;15;i++){
    if in[i]!=-1 &amp;&amp; !instance_exists(in[i]) &amp;&amp; ds_list_find_index(objControl.deactL,in[i])=-1{
        //show_debug_message(in[i])
        in[i]=-1
    }
    if out[i]!=-1 &amp;&amp; !instance_exists(out[i]) &amp;&amp; ds_list_find_index(objControl.deactL,out[i])=-1{
        //show_debug_message(out[i])
        out[i]=-1
    }
    
    
    
    if in[i]!=-1 &amp;&amp; instance_exists(in[i]){
        found=false
        with(in[i]){
            for(var a=0;a&lt;15;a++){
                if out[a]=other.id{
                    other.found=true
                    break;
                }
            }
        }
        
        if found=false{
            in[i]=-1
        }
    }
    
    if out[i]!=-1 &amp;&amp; instance_exists(out[i]){
        found=false
        with(out[i]){
            for(var a=0;a&lt;15;a++){
                if in[a]=other.id{
                    other.found=true
                    break;
                }
            }
        }
        
        if found=false{
            out[i]=-1
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checkOrder

depth=0


if type!=3{exit}

var len = string_length(text);
var dlen = string_length(string_digits(text));

if len != dlen || len=0 {
    exit
}


var nn=-1;
for(i=0;i&lt;15;i++){
    if in[i]!=-1 &amp;&amp; instance_exists(in[i]){
        nn=in[i]
        break;
    }
}
var pos0;
for(i=0;i&lt;15;i++){
    if nn.out[i]!=-1 &amp;&amp; nn.out[i]=id{
        pos0=i;
        break;
    }
}
if nn!=-1 &amp;&amp; nn.type=2{
    
    for(i=0;i&lt;15;i++){
        if nn.out[i]!=-1 &amp;&amp; nn.out[i]!=id
        &amp;&amp; instance_exists(nn.out[i]){
        
            if nn.out[i].text!=""{
                var len = string_length(nn.out[i].text);
                var dlen = string_length(string_digits(nn.out[i].text));
                
                if len == dlen {
                    //Is only digits
                    if real(text)&lt;real(nn.out[i].text)
                    &amp;&amp; pos0&gt;i{
                        //swap places!
                        var o=nn.out[i];
                        nn.out[i]=nn.out[pos0]
                        nn.out[pos0]=o
                        with(nn){event_user(0)}
                        event_user(0)
                        exit
                    }
                    if real(text)&gt;real(nn.out[i].text)
                    &amp;&amp; pos0&lt;i{
                        //swap places!
                        var o=nn.out[i];
                        nn.out[i]=nn.out[pos0]
                        nn.out[pos0]=o
                        with(nn){event_user(0)}
                        event_user(0)
                        exit
                    }
                }
            }
            
        }
    }
    
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connections

if outDrag2=true
&amp;&amp; mouse_check_button_released(mb_left){
    outDrag2=false
}

x=round(x)
y=round(y)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

image_xscale=w/2
image_yscale=h/2

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text-protection
/*
    There are some bugs with the text system being flawed
        and deleting stuff--- so this is to stop that
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>instance_exists(objNPC)</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checkIfView


if !scrNodeInView(id){
    exit
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connections

if scr_hover(outx,outy,outx+outw,outy+outh)
&amp;&amp; mouse_check_button_pressed(mb_left){
    outDrag2=true
    global.dragOutNode=true
    global.dragOutNodeID=id
    
    for(i=0;i&lt;15;i++){
        if out[i]=-1{
            outDrag=i
            break
        }
    }
}

if //scr_hover(inx,iny,inx+inw,iny+inh)
    scr_hover(x,y,x+w,y+h)
&amp;&amp; mouse_check_button_released(mb_left){
    outDrag=-1
    outDrag2=false
    did=false
    with(object_index){
        if outDrag2=true &amp;&amp; id!=other.id{
            for(i=0;i&lt;15;i++){
                if out[i]=other.id{
                    exit
                }
            }
            other.outDrag2=true//outDrag2
            other.outDrag=id
            out[outDrag]=other.id
            other.alphaCheck=1 alphaCheck=1
            scrNodeDeletePaths()
        }
    }
    if outDrag2!=false{
        for(i=0;i&lt;15;i++){
            if in[i]=-1{
                in[i]=outDrag
                scrNodeDeletePaths()
                outDrag.alphaCheck=1 alphaCheck=1
                break;
            }
        }
        //in[outDrag2]=outDrag
    }
    
    if instance_exists(objConvo){
        with(objConvo){
            create=1
        }
    }
    
    
    outDrag2=false
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double click

if 1=0{

if click&gt;0{
    click--
}
if scr_hover(x,y,x+w,y+h)
&amp;&amp; mouse_check_button_released(mb_left){
    click+=30
    if click&gt;35{
        view_xview[0]=x+(w/2)-(1280/2)
        view_yview[0]=y+(h/2)-(720/2)
        objControl.zoom_w=1280
        objControl.zoom_h=720
    }
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete

if 1==0{

if click2&gt;0{
    click2--
}
if scr_hover(x,y,x+w,y+h)
&amp;&amp; mouse_check_button_released(mb_right){
    click2+=30
    if click2&gt;30{
        instance_destroy()
        if instance_exists(objConvo){
            with(objConvo){
                create=1
            }
        }
        
    }
}

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drag

if mouse_check_button_pressed(mb_left)
&amp;&amp; scr_hover(x+3,y+3,x+w-3,y+h-3)
&amp;&amp; !scr_hover(inx,iny,inx+inw,iny+inh)
&amp;&amp; !scr_hover(outx,outy,outx+outw,outy+outh)
&amp;&amp; (
    type=0 &amp;&amp; !scr_hover(x+3,outy+5+outh,x+3+w-6,(outy+5+outh)+h-5-(25+outh))
    || type=1 &amp;&amp; !scr_hover(x+3,outy+5+outh,x+3+w-6,(outy+5+outh)+h-5-(25+outh))
    || type=2 &amp;&amp; !scr_hover(x+3,outy+5+outh,x+3+w-6,(outy+5+outh)+h-5-(25+outh))
    || type=3 &amp;&amp; !scr_hover(x+3,outy+5+outh,x+3+w-6,(outy+5+outh)+h-5-(25+outh)) )
&amp;&amp; global.dragNode=false{
    global.dragNode=true
    drag=true
    X=mouse_x
    Y=mouse_y
    X2=mouse_x-x
    Y2=mouse_y-y
    with(object_index){
        if id!=other.id{
            drag=false
        }
    }
}

if drag=true{
    if point_distance(X,Y,mouse_x,mouse_y)&gt;15{
        var xx,yy;
        xx=x yy=y
        x=mouse_x-X2
        y=mouse_y-Y2
        X=-999999
        Y=-999999
        if xx!=x || yy!=y{
            //scrNodeDeletePaths()
            for(var ii=0;ii&lt;15;ii++){
                if path_exists(path[ii]){
                    path_delete(path[ii])
                }
            }
        }
        
        if selectR=1{
            for(var i=0;i&lt;ds_list_size(objControl.dragL);i++){
                var nn=ds_list_find_value(objControl.dragL,i);
                if nn!=id{
                    nn.x-=xx-x
                    nn.y-=yy-y
                }
            }
        }
        
    }
    if mouse_check_button_released(mb_left){
        drag=false
        global.dragNode=false
        scrNodeDeletePaths()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize

if scr_hover(x-3,y,x+3,y+h){
    if mouse_check_button_pressed(mb_left){
        hold=0
    }
}
if scr_hover(x-3+w,y,x+3+w,y+h)
&amp;&amp; !scr_hover(x-range+w,y+(h/2)-range,x+range+w,y+(h/2)+range){
    if mouse_check_button_pressed(mb_left){
        hold=2
    }
}

if scr_hover(x,y-3,x+w,y+3){
    if mouse_check_button_pressed(mb_left){
        hold=1
    }
}
if scr_hover(x,y-3+h,x+w,y+3+h){
    if mouse_check_button_pressed(mb_left){
        if hold=2{
            hold=4
        }else{
            hold=3
        }
    }
}

if hold!=-1 &amp;&amp; mouse_check_button_released(mb_left){
    hold=-1
}

if hold!=-1{
    if instance_exists(objConvo){
        with(objConvo){
            create=1
        }
    }
}

switch(hold){
    
    //left
    case 0:
    break;
    
    //top
    case 1:
    break;
    
    //right
    case 2:
        w=mouse_x-x
    break;
    
    //bottom
    case 3:
        h=mouse_y-y
    break;
    
    //left-bottom
    case 4:
        w=mouse_x-x
        h=mouse_y-y
    break;
}



//clamp
//w=clamp(w,miw,maw)
//h=clamp(h,mih,mah)
if type!=3{
    w=clamp(w,miw,999999)
    h=clamp(h,mih,999999)
}else{
    w=clamp(w,miw,maw)
    h=clamp(h,mih,mah)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select

//--in the individual scr_text____ scripts

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///recalc W + H

draw_set_font(fnt_default)

if type!=2 &amp;&amp; type!=3{

    var mw=w;
    var strPosTemp=1;
    var hh2=string_height(text);
    while(hh2&gt;0){
        //find width of line of text
        var ww2=0;
        var pos0=strPosTemp, pos1=strPosTemp;
        while(pos0&gt;0 &amp;&amp; string_char_at(text,pos0)!=chr(13)){
            pos0--
        }
        
        while(pos1&lt;=string_length(text) &amp;&amp; string_char_at(text,pos1)!=chr(13)){
            pos1++
        }
        
        ww2=string_width(string_copy(text,pos0,pos1-pos0 ))
        strPosTemp+=(pos1-pos0)
        
        mw=max(mw,ww2+8)
        hh2-=20
    }
    w=mw
    
    
    var mh=h;
    mh=max(mh,string_height(text)+47)
    h=mh
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alpha

event_user(1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alpha


//alphaCheck=!alphaCheck
if alphaCheck=1{
    alphaCheck=0
}else{exit}


alpha=1

//check if connected to anything
if type!=0{
    if scr_nodeHasNoConnections(id){
        alpha=0.65
    }
}

//textBoxes
if type=0{
    var aa,ii;
    aa=-1
    ii=-1
    //check multiple connections
    for(i=0;i&lt;15;i++){
        if in[i]!=-1 &amp;&amp; instance_exists(in[i]){
            for(a=0;a&lt;15;a++){
                if in[i].out[a]!=id &amp;&amp; in[i].out[a]!=-1
                &amp;&amp; instance_exists(in[i].out[a]){
                    if in[i].out[a].type=0{
                        aa=a
                    }
                }
            }
            for(a=0;a&lt;15;a++){
                if in[i].out[a]=id{
                    ii=a
                }
            }
            
            if aa!=-1 &amp;&amp; ii!=-1
            &amp;&amp; aa&lt;ii{
                alpha=0.65
            }
            
        }
    }
    
    
    //check if no connections
    checkFirstNode=true;
    with(objNode){
        if other.checkFirstNode=true{
            other.checkFirstNode=false
        }else{
            if scr_nodeHasNoConnections(id){
                alpha=0.65
            }
        }
    }
    
    
    //check for correct connections
    if alpha=1{
        
        //out=check?
        var fo=false;
        for(i=0;i&lt;15;i++){
            if out[i]!=-1 &amp;&amp; instance_exists(out[i])
            &amp;&amp; out[i].type=0{
                fo=true
                break;
            }
        }
        if fo=false{
            for(i=0;i&lt;15;i++){
                if out[i]!=-1 &amp;&amp; instance_exists(out[i])
                &amp;&amp; out[i].type=3{
                    alpha=0.65
                }
            }
        }
        
        
    }
    
    
    
}


//switches
if type=2{
    
    var fo=false;
    //check to see if thier outs are only checks
    
    for(i=0;i&lt;15;i++){
        if out[i]!=-1 &amp;&amp; instance_exists(out[i])
        &amp;&amp; !(out[i].type=3){
            fo=true
            break
        }
    }
    
    //check to see if the checks add up
    var __count=0;
    for(i=0;i&lt;15;i++){
        if out[i]!=-1 &amp;&amp; instance_exists(out[i])
        &amp;&amp; (out[i].type=3){
            __count++
        }
    }
    if switchCount!=__count{fo=true}
    
    
    if fo=true{
        alpha=0.65
    }
    
    
}


//checks
if type=3{
    //make sure the only ins are switches
    for(i=0;i&lt;15;i++){
        if in[i]!=-1 &amp;&amp; instance_exists(in[i])
        &amp;&amp; in[i].type!=2{
            alpha=0.65
        }
    }
    
    //make sure that they only contain numbers
    if text!=string_digits(text){
        alpha=0.65
    }
    
    //make sure they are properly numbered
    var _in=-1;
    if alpha!=0.65{
        for(i=0;i&lt;15;i++){
            if in[i]!=-1 &amp;&amp; instance_exists(in[i])
            &amp;&amp; in[i].type=2{
                _in=in[i];
                break;
            }
        }
        var tempList=ds_list_create()
        
        for(i=0;i&lt;15;i++){
            if _in.out[i]!=-1 &amp;&amp; instance_exists(_in.out[i])
            &amp;&amp; _in.out[i].type=3{
                ds_list_add(tempList,string_digits(_in.out[i].text))
            }
        }
        
        for(i=0;i&lt;_in.switchCount;i++){
            if ds_list_find_index(tempList,string(i+1))=-1{
                alpha=0.65
                _in.alpha=0.65
                break;
            }
        }
        
        
        ds_list_destroy(tempList);
    }
    
    
    
    //make sure they lead to something!
    var _f=false
    for(i=0;i&lt;15;i++){
        if out[i]!=-1 &amp;&amp; instance_exists(out[i]){
            _f=true
            if out[i].type=3{
                alpha=0.65
            }
        }
    }
    if _f=false{
        alpha=0.65
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CreatePaths
if objControl.op0[0]=false{
    exit
}

for(var _i=0;_i&lt;15;_i++){
    if out[_i]!=-1 &amp;&amp; instance_exists(out[_i]){
        if path_exists(path[_i]){
            path_delete(path[_i])
        }
        var xx1,yy1,xx2,yy2;
        xx1=x+w+8
        yy1=outy+(outh/2)
        xx2=out[_i].x-8
        yy2=out[_i].outy+(out[_i].outh/2)
        
        grid = mp_grid_create(min(xx1,xx2)-512,min(yy1,yy2)-512,max(xx1,xx2)+1024,max(yy1,yy2)+1024, 8, 8);
        
        
        with(objNode){
            mp_grid_add_rectangle(other.grid,x,y,x+(w),y+(h))
        }
        path[_i] = path_add()
        var r=mp_grid_path(grid,path[_i],xx1,yy1,xx2,yy2,1);
        if r=false{
            path_add_point(path[_i],xx1,yy1,1)
            path_add_point(path[_i],xx2,yy2,1)
        }
        path_set_kind(path[_i],0)
        path_set_closed(path[_i],0)
        //path_set_precision(path[_i],2)
        //funcPathOptimized(path[_i],8,objNode)
        mp_grid_destroy(grid)
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DrawHighlight

if instance_exists(objNPC){
    if on0==objNPC.on0
    &amp;&amp; on1==objNPC.on1{
        draw_set_color(c_yellow)
        draw_set_alpha(0.75)
        draw_rectangle(x-5,y-5,x+w+5,y+h+5,false)
        draw_set_alpha(1)
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DrawMain

color = color_type[clamp(type,0,3)]

if (x+w&lt;view_xview || y+h&lt;view_yview)
|| (x&gt;view_xview+view_wview || y&gt;view_yview+view_hview){
    exit
}

if selectR=1{
    draw_set_alpha(0.75)
    draw_set_color(c_ltgray)
    draw_roundrect_ext(x-5,y-5,x+w+5,y+h+5,3,3,false)
}


//drawBox
draw_set_alpha(alpha)
draw_set_color(color)
draw_roundrect_ext(x,y,x+w,y+h,3,3,false)
draw_set_color(c_dkgray)
draw_roundrect_ext(x,y,x+w,y+h,3,3,true)
if global.pinNode=id{
    draw_roundrect_ext(x-1,y-1,x+w+1,y+h+1,3,3,true)
    draw_roundrect_ext(x-2,y-2,x+w+2,y+h+2,3,3,true)
    if convo!=-1 &amp;&amp; instance_exists(convo)
    &amp;&amp; global.pinNode=id{
        global.pinNode=-1
        convo.pinNodeConvo=id
    }
}
if convo!=-1 &amp;&amp; instance_exists(convo)
&amp;&amp; convo.pinNodeConvo=id{
    draw_set_color(c_ltgray)
    draw_roundrect_ext(x-1,y-1,x+w+1,y+h+1,3,3,true)
    draw_roundrect_ext(x-2,y-2,x+w+2,y+h+2,3,3,true)
    draw_set_color(c_dkgray)
}

draw_line(x,y+18,x+w,y+18)

draw_set_color(c_black)
draw_set_font(fnt_default)
draw_set_halign(fa_center)
draw_set_valign(fa_top)
if type!=3{
    draw_text(x+(w/2),y,name + "   ["+string(on0)+","+string(on1)+"]")
}else{
    draw_text(x+(w/2),y,name)
}

inx=x+3
iny=y+20
outx=x+w-outw-3
outy=y+20

//IN
draw_set_color(c_ltgray)
draw_roundrect_ext(inx,iny,inx+inw,iny+inh,2,2,false)
draw_set_color(c_black)
draw_roundrect_ext(inx,iny,inx+inw,iny+inh,2,2,true)
draw_text(inx+(inw/2),iny+1,"in")
//OUT
draw_set_color(c_ltgray)
draw_roundrect_ext(outx,outy,outx+outw,outy+outh,2,2,false)
draw_set_color(c_black)
draw_roundrect_ext(outx,outy,outx+outw,outy+outh,2,2,true)
draw_text(outx+(outw/2),outy+1,"out")




switch(type){
    
    case 0:
        scr_textBox(x+3,outy+5+outh,w-6,h-5-(25+outh));
    break;
    
    case 1:
        scr_scriptBox(x+3,outy+5+outh,w-6,h-5-(25+outh))
    break;
    
    case 2:
        scr_switchBox(x+3,outy+5+outh,w-6,50);
    break;
    
    case 3:
        scr_checkBox(x+3+50,outy,w-6-49-50,h-outh-10);
    break;
}


//debugConnections
/*
yy=y+h
draw_set_color(c_black)
draw_set_alpha(1)
for(i=0;i&lt;15;i++){
    draw_text(x,yy,in[i])
    draw_text(x+150,yy,out[i])
    yy+=15
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawPin + delete


//PIN
if type=0 || type=2{
    
    var xx,yy,ww,hh;
    xx=x+3 yy=y+3
    ww=12 hh=10
    draw_set_alpha(1)
    if global.pinNode=id
    || (convo!=-1 &amp;&amp; instance_exists(convo) &amp;&amp; convo.pinNodeConvo=id){
        draw_set_color(c_gray)
        draw_rectangle(xx,yy,xx+ww,yy+hh,false)
    }
    draw_set_color(c_black)
    draw_rectangle(xx,yy,xx+ww,yy+hh,true)
    
    draw_sprite(sprPin,0,xx+ceil(ww/2)+1,yy+ceil(hh/2)+1)
    
    
    //Add Pin
    if scr_hover(xx,yy,xx+ww,yy+hh)
    &amp;&amp; mouse_check_button_released(mb_left){
        if convo=-1 || !instance_exists(convo){
            if global.pinNode!=id{
                global.pinNode=id
            }else{
                global.pinNode=-1
            }
        }else{
            if convo.pinNodeConvo!=id{
                convo.pinNodeConvo=id
            }else{
                convo.pinNodeConvo=-1
            }
        }
    }
    
    
}


//EXIT
var xx,yy,ww,hh;
ww=12 hh=10
xx=x+w-3-ww yy=y+3
draw_set_color(c_black)
draw_rectangle(xx,yy,xx+ww,yy+hh,true)
draw_sprite_ext(sprExit,0,xx+ceil(ww/2)+1,yy+ceil(hh/2)+1,0.5,0.5,0,c_white,1)
if scr_hover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    instance_destroy()
    if instance_exists(objConvo){
        with(objConvo){
            create=1
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

draw_set_alpha(1)
draw_set_color(c_white)
//draw_text(x,y-15,convo)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
