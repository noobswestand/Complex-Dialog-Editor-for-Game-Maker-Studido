<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Int

global.gui_width=1280
global.gui_height=720

display_set_gui_size(global.gui_width,global.gui_height)

saveFile=""
saveFile2=""
lastSaved=""

on0=0
on1=0
pon0=0
pon1=0
ponID=-1
ponWrote=false

global.dragOutNode=false
global.dragOutNodeID=-1
global.dragNode=false

global.pinNode=-1


openTemp=0

//multi-select
dragX=0
dragY=0
dragT=0
dragC=0
dragL=ds_list_create()


deactL=ds_list_create()


//globalvar fnt_default;
//fnt_default=font_add("UbuntuMono-B.ttf",12,true,0,1,60000)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
CAMAERA_XOFF=0
CAMAERA_YOFF=0
CAMERA_DELAY=0
zoom_wi=1280//256
zoom_hi=720//160
zoom_w=1280//256
zoom_h=720//160
X=0
Y=0
vmx=0
omx=0
vmy=0
omy=0

CAMAERA_XSPEED=0
CAMAERA_YSPEED=0

CAMERA_XPRE=0
CAMERA_YPRE=0


initial_w = 1280;
initial_h = 720;
v_scale = 1;
v_dist = 0;

MiniClick=false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DropDown
dropT=0
dropH=0
dropS=0
dropM=4
drop[0]="Text"
drop[1]="Script"
drop[2]="Switch"
drop[3]="Check"

dropI[0]=0
dropI[1]=0
dropI[2]=0
dropI[3]=0

nodeCount=0
nodeList=ds_list_create();
for(i=0;i&lt;1000;i++){
    nodeList[| i]=-1
}



fileM=7
fileT=0
nfile[0]="New"       file0[0]="Ctrl+N"   file1[0]=scr_new_dialog
nfile[1]="Open"      file0[1]="Ctrl+O"   file1[1]=scr_open_dialog
nfile[2]="Save"      file0[2]="Ctrl+S"   file1[2]=scr_save_dialog
nfile[3]="Save As"   file0[3]=""         file1[3]=scr_saveAs_dialog
nfile[4]="Export"    file0[4]="Ctrl+E"   file1[4]=scr_export_dialog
nfile[5]="Test"      file0[5]="Ctrl+T"   file1[5]=scr_test_dialog
nfile[6]="Exit"      file0[6]="Alt+F4"   file1[6]=scr_close_dialog

opM=10
opT=0
ini_open("settings.ini")
nop[0]="Fancy Lines"        op0[0]=ini_read_real("settings","lines",1)      op1[0]=scrOptionsToggleLines
nop[1]="Arrows"             op0[1]=ini_read_real("settings","arrows",1)     op1[1]=scrOptionsToggleArrows
nop[2]="Change Quest Step"  op0[2]=0                                        op1[2]=scrOptionsChangeQuest
nop[3]="FullScreen"         op0[3]=ini_read_real("settings","fullscreen",0) op1[3]=scrOptionsFullScreen
nop[4]="Resolution"         op0[4]=0                                        op1[4]=scrOptionsResolution
nop[5]="Color Coding"       op0[5]=ini_read_real("settings","color",1)      op1[5]=scrOptionsColor
nop[6]="Change Variables"   op0[6]=0                                        op1[6]=scrOptionsVariables
nop[7]="Change Defaults"    op0[7]=0                                        op1[7]=scrOptionsDefaults
nop[8]="Reset Defaults"     op0[8]=0                                        op1[8]=scrOptionsDefaultsReset
nop[9]="Clear Backups"      op0[9]=0                                        op1[9]=scrOptionsCleaBackups

window_set_fullscreen(op0[3])

global.gui_width=clamp(ini_read_real("settings","resw",1280),640,4096)
global.gui_height=clamp(ini_read_real("settings","resh",720),480,2160)
display_set_gui_size(global.gui_width,global.gui_height)
window_set_size(global.gui_width,global.gui_height)
ini_close()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Convo
getConvo=false

convCount=0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PopUp display

CreateNode=false
CreateNodeID=-1
CreateNodeX=0
CreateNodeY=0
CreateNodeCreateType=-1
CreateNodeCreate=false
dragOutNodeID=-1
CreateNodeCreateText=""

global.createPopDisplay=true
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quests

for(i=0;i&lt;1000;i++){
    quest[i]=0//step
}

chatMap=ds_map_create() //Map used for [var=xxx] tag!
chatMapChange=false //used for editing

chatMapT=ds_map_create()//Used for testing


//Default values for text effects
defaultMap=ds_map_create()
event_user(0)
defaultMapChange=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if openTemp=0{
    openTemp=1

    v_xx=view_xview
    v_yy=view_yview
    v_ww=view_wview
    v_hh=view_hview
    
    view_xview=-99999
    view_yview=-99999
    view_wview=199998
    view_hview=199998
    
    alarm[11]=1
}else{
    openTemp=0
    
    with(objNode){
        scrNodeDeletePaths()
    }
    
    view_xview=v_xx
    view_yview=v_yy
    view_wview=v_ww
    view_hview=v_hh
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ShortCuts

if keyboard_check_pressed(ord("S"))
&amp;&amp; keyboard_check(vk_control){
    if instance_exists(objNode){with(objNode){select=0}}
    scr_save_dialog()
}
if keyboard_check_pressed(ord("E"))
&amp;&amp; keyboard_check(vk_control){
    if instance_exists(objNode){with(objNode){select=0}}
    scr_export_dialog()
}
if keyboard_check_pressed(ord("O"))
&amp;&amp; keyboard_check(vk_control){
    if instance_exists(objNode){with(objNode){select=0}}
    scr_open_dialog()
}
if keyboard_check_pressed(ord("N"))
&amp;&amp; keyboard_check(vk_control){
    scr_new_dialog()
}
if keyboard_check_pressed(vk_f4)
&amp;&amp; keyboard_check(vk_alt){
    scr_close_dialog()
}

if keyboard_check_pressed(ord("T"))
&amp;&amp; keyboard_check(vk_control){
    scr_test_dialog()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///multi-select
found=false
with(objNode){if select=1{other.found=true}}

if global.dragNode=false &amp;&amp; found=false &amp;&amp; global.dragOutNode=false{
    
    if mouse_check_button_pressed(mb_left)
    &amp;&amp; dragT=0{
        dragT=1
        dragX=mouse_x
        dragY=mouse_y
    }
    if mouse_check_button_released(mb_left)
    &amp;&amp; dragT=1{
        dragT=0
        dragC=0
        ds_list_clear(dragL)
        //do checking here
        if instance_exists(objNode){
            with(objNode){
                selectR=0
                if point_in_rectangle(x,y,mouse_x,mouse_y,other.dragX,other.dragY)
                || point_in_rectangle(x,y,other.dragX,other.dragY,mouse_x,mouse_y){
                    other.dragC++
                    ds_list_add(other.dragL,id)
                    selectR=1
                }
            }
            
        }
    }
    
    
}else{
    dragT=false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///De-activate

/*
instance_activate_region(view_xview-50,view_yview-50,view_wview+100,view_hview+100,1)
with(objNode){
    if !scrNodeInViewConnection(id){
        ds_list_add(objControl.deactL,id)
        instance_deactivate_object(id)
    }else{
        if ds_list_find_index(objControl.deactL,id)&gt;=0{
            ds_list_delete(objControl.deactL,ds_list_find_index(objControl.deactL,id))
        }
    }
}
*/
with(objNode){
    //if !point_in_rectangle(x+(w/2),y+(h/2),view_xview-50,view_yview-50,view_xview+view_wview+100,view_yview+view_hview+100){
    if !scrNodeInViewConnection(id){
        visible=false
    }else{
        visible=true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
if openTemp=1{exit}
/////Windows Zoom/////
hover=false
with(objNode){
    if scr_hover(x,y,x+w,y+h){
        other.hover=true
        break
    }
}
if os_type=os_windows{
    if mouse_wheel_down() &amp;&amp; hover=false{
        zoom_w=clamp(zoom_w*1.1,640,3840)
        zoom_h=clamp(zoom_h*1.1,360,2160)
    }
    if mouse_wheel_up(){
        zoom_w=clamp(zoom_w*.9,640,3840)
        zoom_h=clamp(zoom_h*.9,360,2160)
    }
    zoom_wi+=(zoom_w-zoom_wi)*.2
    zoom_hi+=(zoom_h-zoom_hi)*.2
    
    
    var xoff,yoff;
    xoff=(((zoom_wi*.5)*2)-view_wview[0])*-1
    yoff=(((zoom_hi*.5)*2)-view_hview[0])*-1
    
    view_wview[0]=zoom_wi//(zoom_wi*.5)*2
    view_hview[0]=zoom_hi//(zoom_hi*.5)*2
    
    view_xview[0]+=xoff/2
    view_yview[0]+=yoff/2
}else{
    var mx0raw, my0raw, mx1raw, my1raw;
 mx0raw = device_mouse_raw_x(0);
 my0raw = device_mouse_raw_y(0);
 mx1raw = device_mouse_raw_x(1);
 my1raw = device_mouse_raw_y(1);

 if device_mouse_check_button(1, mb_middle)
    {
    if device_mouse_check_button_pressed(1, mb_middle)
       {
       v_dist = point_distance(mx0raw, my0raw, mx1raw ,my1raw) * v_scale;
       }
    v_scale = v_dist / max(1, point_distance(mx0raw, my0raw, mx1raw, my1raw));
    if v_scale&gt;1{v_scale*=.9}
    if v_scale&lt;1{v_scale*=1.1}
    v_scale=clamp(v_scale,0.1429,1)
    view_wview[0] = initial_w * v_scale;
    view_hview[0] = initial_h * v_scale;
    //view_xview[0] = (view_wview[0] / 2);
    //view_yview[0] = (view_hview[0] / 2);
    }

}

X=view_xview[0];
Y=view_yview[0];
if device_mouse_check_button(1, mb_middle)=false{
if mouse_check_button(mb_middle){
    CAMERA_DELAY++
    if CAMERA_DELAY&gt;3{
        with(objNode){select=0}
        view_xview[0]-=vmx;
        view_yview[0]-=vmy;
    }else{
        CAMERA_XPRE=view_xview[0]
        CAMERA_YPRE=view_yview[0]
    }
}
if mouse_check_button_released(mb_middle){CAMERA_DELAY=0}
vmx=(mouse_x-X)-omx;
omx=(mouse_x-X);
vmy=(mouse_y-Y)-omy;
omy=(mouse_y-Y);
}


found=false
if instance_exists(objNode){
    with(objNode){if select==1{other.found=true}}
}
if instance_exists(objConvo){
    with(objConvo){if select1==1 || select0==1{other.found=true}}
}
if found=false{
    var _x=keyboard_check(vk_left)-keyboard_check(vk_right);
    var _y=keyboard_check(vk_up)-keyboard_check(vk_down);
    /*if _x!=0 || _y!=0{
        with(objNode){select=0}
    }
    */
    var _s=0.025;
    _s*=zoom_wi;
    CAMAERA_XSPEED+=((_x*_s)-CAMAERA_XSPEED)/3
    CAMAERA_YSPEED+=((_y*_s)-CAMAERA_YSPEED)/3
    if CAMAERA_XSPEED&lt;0.1 &amp;&amp; CAMAERA_XSPEED&gt;-0.1{CAMAERA_XSPEED=0}
    if CAMAERA_YSPEED&lt;0.1 &amp;&amp; CAMAERA_YSPEED&gt;-0.1{CAMAERA_YSPEED=0}
    view_xview[0]-=CAMAERA_XSPEED
    view_yview[0]-=CAMAERA_YSPEED
}
/*
if (CAMAERA_XSPEED!=0) || (CAMAERA_YSPEED!=0){
    if view_xview[0]&lt;-1*(view_wview[0]/2){view_xview[0]=room_width-(view_wview[0]/2)-5 CAMERA_DELAY=0}
    if view_xview[0]&gt;room_width-(view_wview[0]/2){view_xview[0]=-(view_wview[0]/2)+5  CAMERA_DELAY=0}
    if view_yview[0]&lt;-1*(view_hview[0]/2){view_yview[0]=room_height-(view_hview[0]/2)-5 CAMERA_DELAY=0}
    if view_yview[0]&gt;room_height-(view_hview[0]/2){view_yview[0]=-(view_hview[0]/2)+5  CAMERA_DELAY=0}
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CleanUp

if global.pinNode!=-1
&amp;&amp; !instance_exists(global.pinNode){
    global.pinNode=-1
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Default Values

ds_map_clear(defaultMap)
ds_map_add(defaultMap,"textSpeed",1)
ds_map_add(defaultMap,"textColor","white")
ds_map_add(defaultMap,"textAlpha",1)
ds_map_add(defaultMap,"textFont","fnt_default")

ds_map_add(defaultMap,"textWaveA",0)
ds_map_add(defaultMap,"textWaveF",0)
ds_map_add(defaultMap,"textWaveO",0)
ds_map_add(defaultMap,"textShakeX",0)
ds_map_add(defaultMap,"textShakeY",0)
ds_map_add(defaultMap,"textShake",0)
ds_map_add(defaultMap,"textHSV",0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objNPC){exit}

if mouse_check_button_released(mb_left){
    
    //toggle back on if off
    if global.createPopDisplay=false{global.createPopDisplay=true exit}
    
    //check out
    if global.dragOutNode=true{
        hover=false
        with(objNode){
            if scr_hover(x-15,y-15,x+w+15,y+h+15){
                other.hover=true
                break
            }
        }
        
        if hover=false{
        
            CreateNode=true
            CreateNodeID=global.dragOutNodeID
            CreateNodeX=mouse_x
            CreateNodeY=mouse_y
            CreateNodeXGUI=device_mouse_x_to_gui(0)
            CreateNodeYGUI=device_mouse_y_to_gui(0)
            
        }
    }
    
    global.dragOutNode=false
    global.dragOutNodeID=-1
    
    
}

if mouse_check_button_released(mb_right){
    if global.dragOutNode=false &amp;&amp; !scr_GUIhover(0,0,global.gui_width,50){
    
        if CreateNode=false{
            hover=false
            with(objNode){
                if scr_hover(x,y,x+w,y+h){
                    other.hover=true
                    break
                }
            }
            if hover=false{
                CreateNode=true
                CreateNodeID=-1
                CreateNodeX=mouse_x
                CreateNodeY=mouse_y
                CreateNodeXGUI=device_mouse_x_to_gui(0)
                CreateNodeYGUI=device_mouse_y_to_gui(0)
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vignette

draw_set_color(c_white)
draw_set_alpha(0.5)
//draw_background_stretched(bckVignette,0,0,global.gui_width,global.gui_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TopNavBar
scr_draw_box(0,0,global.gui_width,25)

draw_set_halign(fa_right)
draw_set_font(fnt_title)
draw_set_alpha(1)
draw_text_shadow(global.gui_width-15,3,"Dialog")

var xx,yy,ww,hh;
xx=5 yy=2 ww=145 hh=20

xx+=250
ww=150
draw_set_color(c_gray)
draw_rectangle(xx,yy,xx+ww,yy+hh+dropH,false)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_text_shadow(xx+(ww/2),yy-1,drop[dropS])

if dropT=true{
    for(_ii=0;_ii&lt;dropM;_ii++){
        if scr_GUIhover(xx,yy+25+(_ii*25),xx+ww,yy+25+(_ii*25)+24){
            draw_text_shadow(xx+(ww/2),yy+25+(_ii*25),drop[_ii])
        }else{
            draw_text_shadow(xx+(ww/2)-5,yy+25+(_ii*25),drop[_ii])
        }
        if scr_GUIhover(xx,yy+25+(_ii*25),xx+ww,yy+25+(_ii*25)+24)
        &amp;&amp; mouse_check_button_released(mb_left){
            dropT=false
            dropS=_ii
            break
        }
    }
    if mouse_check_button_released(mb_left){
        dropT=false
    }
}

if scr_GUIhover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    dropT=!dropT
}

dropH+=((dropT*dropM*25)-dropH)/3


ww=145
xx+=165
if scr_GUIButton(xx,yy,xx+ww,yy+hh,"Create Node"){
    nn=instance_create((view_wview[0]/2)+view_xview,
    (view_hview[0]/2)+view_yview,objNode)//objState
    nn.name=drop[dropS]+": "+string(dropI[dropS])
    nn.type=dropS
    
    for(i=0;i&lt;1000;i++){
        if nodeList[| i]=-1{
            break;
        }
    }
    nn.pid=i//nodeCount
    nodeCount++
    nodeList[| i]=nn
    //ds_list_add(nodeList,nn)
    dropI[dropS]++
}



ww=145
xx+=165+15
if scr_GUIButton(xx,yy,xx+ww,yy+hh,"Conversation"){
    getConvo=!getConvo
    nn=instance_create(0,0,objNPC)
    nn.draw=false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///File system

//draw the File system
xx=5 yy=2 ww=75
draw_set_halign(fa_left)
draw_text_shadow(xx+1,yy,"File")
if scr_GUIhover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    fileT=!fileT
}
var yyy=yy+25;
yy+=5
ww=200
if fileT=true{
    with(objNode){select=0}
    with(objConvo){select0=0 select1=0}
    draw_set_color(c_dkgray)
    draw_rectangle(xx,yy+hh-3,xx+ww,yy+hh+(fileM*30)-3,false)
    draw_set_color(c_white)
    draw_rectangle(xx-2,yy-3,xx+75-3,yy+hh-3,true)
    draw_set_color(c_ltgray)
    draw_rectangle(xx,yy+hh-3,xx+ww,yy+hh+(fileM*30)-3,true)
    for(var _ii=0;_ii&lt;fileM;_ii++){
        if scr_GUIhover(xx,yyy,xx+ww,yyy+29){
            draw_set_color(merge_color(c_gray,c_dkgray,0.5))
            draw_rectangle(xx+1,yyy,xx+ww-1,yyy+26,false)
            if mouse_check_button_released(mb_left){
                script_execute(file1[_ii])
                fileT=false
                global.createPopDisplay=false
            }
        }
        draw_set_halign(fa_left)
        draw_text_shadow(xx+3,yyy,nfile[_ii])
        draw_set_halign(fa_right)
        draw_text_shadow(xx-3+ww,yyy,file0[_ii])
        
        yyy+=30
    }
}

xx=5 yy=2 ww=75
if !scr_GUIhover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    fileT=false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options

//draw the options
xx=95 yy=2 ww=75
draw_set_halign(fa_left)
draw_text_shadow(xx+1,yy,"Options")
if scr_GUIhover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    opT=!opT
}
var yyy=yy+25;
yy+=5
ww=200
if opT=true{
    with(objNode){select=0}
    with(objConvo){select0=0 select1=0}
    draw_set_color(c_dkgray)
    draw_rectangle(xx,yy+hh-3,xx+ww,yy+hh+(opM*30)-3,false)
    draw_set_color(c_white)
    draw_rectangle(xx-2,yy-3,xx+75-3,yy+hh-3,true)
    draw_set_color(c_ltgray)
    draw_rectangle(xx,yy+hh-3,xx+ww,yy+hh+(opM*30)-3,true)
    for(var _ii=0;_ii&lt;opM;_ii++){
        if scr_GUIhover(xx,yyy,xx+ww,yyy+29){
            draw_set_color(merge_color(c_gray,c_dkgray,0.5))
            draw_rectangle(xx+1,yyy,xx+ww-1,yyy+26,false)
            if mouse_check_button_released(mb_left){
                if script_exists(op1[_ii]){
                    script_execute(op1[_ii])
                }
                opT=false
                global.createPopDisplay=false
            }
        }
        draw_set_halign(fa_left)
        draw_text_shadow(xx+3,yyy,nop[_ii])
        draw_set_halign(fa_right)
        draw_text_shadow(xx-3+ww,yyy,op0[_ii])
        
        yyy+=30
    }
}

xx=95 yy=2 ww=75
if !scr_GUIhover(xx,yy,xx+ww,yy+hh)
&amp;&amp; mouse_check_button_released(mb_left){
    opT=false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BottomNavBar


draw_set_color(c_dkgray)
draw_rectangle(0,global.gui_height-20,global.gui_width,global.gui_height,false)

draw_set_halign(fa_left)
draw_set_font(fnt_default)
draw_text_shadow_transformed(3,global.gui_height-18,"Nodes: "+string(instance_number(objNode)),1,1,0)
draw_text_shadow_transformed(100,global.gui_height-18,"Convos: "+string(instance_number(objConvo)),1,1,0)
draw_set_halign(fa_right)
draw_text_shadow_transformed(global.gui_width-3,global.gui_height-18,"Last Saved: "+lastSaved,1,1,0)


//draw_text_shadow(50,50,string_length(keyboard_string))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PopUp display

if CreateNode=true{
    var xx,yy,ww,hh;
    xx=CreateNodeXGUI-100
    yy=CreateNodeYGUI-75
    ww=200 hh=170
    
    /*
    draw_set_color(c_black)
    draw_set_alpha(0.75)
    draw_rectangle(xx,yy,xx+ww,yy+hh,false)
    */
    
    if !scr_GUIhover(xx,yy,xx+ww,yy+hh){
        CreateNode=false
        CreateNodeID=-1
        CreateNodeX=0
        CreateNodeY=0
        CreateNodeCreateType=-1
        CreateNodeCreate=false
        CreateNodeCreateText=""
        exit
    }
    
    if CreateNodeID!=-1{
        switch(CreateNodeID.type){
            
            case 0:
            case 1:
            case 3:
                var xx,yy,ww,hh;
                xx=CreateNodeXGUI
                yy=CreateNodeYGUI-50
                ww=45 hh=35
                if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Text"){
                    CreateNodeCreateType=0
                    CreateNodeCreate=true
                }
                yy=CreateNodeYGUI
                xx+=50
                if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Switch"){
                    CreateNodeCreateType=2
                    CreateNodeCreate=true
                }
                yy=CreateNodeYGUI+50
                xx-=50
                if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Script"){
                    CreateNodeCreateType=1
                    CreateNodeCreate=true
                }
            break;
            
            
            
            case 2:
                CreateNodeCreateType=3
                CreateNodeCreate=true
                //find open
                for(i=0;i&lt;15;i++){
                    if CreateNodeID.out[i]=-1{
                        break
                    }
                }
                CreateNodeCreateText=string(i+1)
                if i+1&gt;CreateNodeID.switchCount{
                    CreateNodeID.switchCount++
                    CreateNodeID.select0[CreateNodeID.switchCount]=0
                    CreateNodeID.selectT[CreateNodeID.switchCount]=""
                    CreateNodeID.selectS[CreateNodeID.switchCount]=0
                    CreateNodeID.switchCount=clamp(CreateNodeID.switchCount,1,14)
                }
            break;
        }
        
    }else{
        var xx,yy,ww,hh;
        xx=CreateNodeXGUI-35
        yy=CreateNodeYGUI-60
        ww=45 hh=35
        if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Text"){
            CreateNodeCreateType=0
            CreateNodeCreate=true
        }
        yy+=50
        xx+=50
        if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Switch"){
            CreateNodeCreateType=2
            CreateNodeCreate=true
        }
        yy+=50
        xx-=50
        if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Script"){
            CreateNodeCreateType=1
            CreateNodeCreate=true
        }
        yy-=50
        xx-=50
        if scr_GUIButton(xx,yy,xx+ww+25,yy+hh,"Check"){
            CreateNodeCreateType=3
            CreateNodeCreate=true
        }
    }
    
    
    
    
    //Create the Node
    if CreateNodeCreate=true{
        
        
        var type=CreateNodeCreateType;
        nn=instance_create(CreateNodeX,CreateNodeY,objNode)
        nn.type=type
        nn.name=drop[type]+": "+string(dropI[type])
        for(i=0;i&lt;1000;i++){
            if nodeList[| i]=-1{
                break;
            }
        }
        nn.pid=i//nodeCount
        nn.text=CreateNodeCreateText
        nodeCount++
        nodeList[| i]=nn
        dropI[type]++
        with(objNode){
            select=false
        }
        
        nn.select=true
        
        //connect the nodes
        with(nn){
            i=0
            in[i]=objControl.CreateNodeID
            image_xscale=w/2
            image_yscale=h/2
            scrNodeDeletePaths()
        }
        
        if CreateNodeID!=-1{
            with(CreateNodeID){
                //find open
                for(i=0;i&lt;15;i++){
                    if out[i]=-1{
                        break
                    }
                }
                out[i]=other.nn
                //scrNodeDeletePaths()
            }
        }
        
        //make convo check again
        if instance_exists(objConvo){
            with(objConvo){
                create=1
            }
        }
    
        //reset
        CreateNode=false
        CreateNodeID=-1
        CreateNodeX=0
        CreateNodeY=0
        CreateNodeCreateType=-1
        CreateNodeCreate=false
        CreateNodeCreateText=""
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Variables
if chatMapChange==true{
    
    draw_set_font(fnt_default)
    draw_set_alpha(1)
    
    var xx,yy,ww,hh,map;
    if instance_exists(objNPC){
        ds_map_copy(chatMapT,objNPC.chatMap)
        map=chatMapT
    }else{
        map=chatMap
    }
    yy=27
    ww=400//global.gui_width/2
    hh=(ds_map_size(map)*25)+30+((ds_map_size(map)==0)*30)
    +((ds_map_size(map)&gt;0)*5)//global.gui_height/2
    xx=global.gui_width-ww-1
    
    
    draw_set_color(c_dkgray)
    draw_rectangle(xx,yy,xx+ww,yy+hh,false)
    draw_set_color(c_white)
    draw_rectangle_width(xx,yy,xx+ww,yy+hh,1)
    
    
    var key=ds_map_find_first(map);
    var yyy=0;
    for(var i=0;i&lt;ds_map_size(map);i++){
        yyy=(i*25)
        
        if scr_GUIhover(xx,yy+yyy+1,xx+(ww/2)-75,yy+yyy+25){
            draw_set_alpha(0.75)
            draw_set_color(c_gray)
            draw_rectangle(xx+1,yy+yyy+1,xx+(ww/2)-75,yy+yyy+25,false)
            draw_set_alpha(1)
            if mouse_check_button_released(mb_left){
                var k,v;
                k=get_string("key",key)
                if k!="" &amp;&amp; k!=key{
                    v=map[?key]
                    ds_map_delete(map,key)
                    ds_map_add(map,k,v)
                }
            }
        }
        if scr_GUIhover(xx+(ww/2)+75,yy+yyy+1,xx+ww,yy+yyy+25){
            draw_set_alpha(0.75)
            draw_set_color(c_gray)
            draw_rectangle(xx+(ww/2)+75,yy+yyy+1,xx+ww-1,yy+yyy+25,false)
            draw_set_alpha(1)
            if mouse_check_button_released(mb_left){map[?key]=get_string("value",map[?key])}
        }
        
        
        draw_set_halign(fa_left)
        draw_text_shadow(xx+5,yy+yyy,key)
        draw_set_halign(fa_right)
        draw_text_shadow(xx+ww-5,yy+yyy,map[? key])
        
        if scr_GUIButton(xx+(ww/2)-50,yy+yyy+2,xx+(ww/2)+50,yy+yyy+21,"Remove"){
            ds_map_delete(map,key)
        }
        
        /*
        if i!=0{
            draw_set_color(c_dkgray)
            draw_line_width(xx,yy+yyy-3,xx+ww,yy+yyy-3,1)
        }*/
        
        key=ds_map_find_next(map, key)
    }
    
    yyy+=30
    draw_line_width(xx,yy+yyy-3,xx+ww,yy+yyy-3,1)
    if scr_GUIButton(xx+(ww/2)-50,yy+yyy,xx+(ww/2)+50,yy+yyy+25,"Add"){
        var k,v;
        k=get_string("key","")
        v=get_string("value","")
        if k!=""{
            ds_map_add(map,k,v)
        }
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Defaults
if defaultMapChange==true{
    var xx,yy,ww,hh,map
    map=defaultMap
    
    draw_set_font(fnt_default)
    draw_set_alpha(1)
    
    yy=27
    ww=250
    hh=(ds_map_size(map)*25)
    xx=global.gui_width-ww-1
    
    draw_set_color(c_dkgray)
    draw_rectangle(xx,yy,xx+ww,yy+hh,false)
    draw_set_color(c_white)
    draw_rectangle_width(xx,yy,xx+ww,yy+hh,1)
    
    var key=ds_map_find_first(map);
    var yyy=0;
    for(var i=0;i&lt;ds_map_size(map);i++){
        yyy=(i*25)
        if scr_GUIhover(xx,yy+yyy+1,xx+ww,yy+yyy+25){
            draw_set_alpha(0.75)
            draw_set_color(c_gray)
            draw_rectangle(xx,yy+yyy+1,xx+ww-1,yy+yyy+25,false)
            draw_set_alpha(1)
            if mouse_check_button_released(mb_left){
                var pvalue=map[?key];
                map[?key]=get_string("value",map[?key])
                if map[?key]=""{
                    map[?key]=pvalue
                }
                
                switch(key){
                    case "textFont":
                    if asset_get_index(map[?key])==-1{
                        show_message("Could not find font: "+string(map[?key]+"#Using the default"))
                    }
                    break;
                    
                    case "textColor":
                        //Stay as string
                    break;
                
                    default:
                        map[?key]=real(map[?key])
                    break;
                }
                
            }
        }
        draw_set_halign(fa_left)
        draw_text_shadow(xx+5,yy+yyy,string_delete(key,1,4))
        draw_set_halign(fa_right)
        draw_text_shadow(xx+ww-5,yy+yyy,map[? key])
        
        key=ds_map_find_next(map, key)
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DrawConnections
/*
    This is just here, so the arrows, and lines are always on top
*/

if !instance_exists(objNode){exit}

with(objNode){
    if convo=-1{
        draw_set_color(c_dkgray)
    }else{
        draw_set_color(c_ltgray)
    }
    if visible==true{
    //drawOuts
    for(i=0;i&lt;15;i++){
        if out[i]!=-1{
            if instance_exists(out[i]){
                
                if objControl.op0[0]=true{
                    if path_exists(path[i]) &amp;&amp; drag=false &amp;&amp; out[i].drag=false{
                        draw_line(x+w,outy+(outh/2),path_get_point_x(path[i],0),path_get_point_y(path[i],0))
                        draw_line(out[i].x,out[i].outy+(out[i].outh/2),
                        path_get_point_x(path[i],path_get_number(path[i])-1),path_get_point_y(path[i],path_get_number(path[i])-1))
                        draw_path(path[i],x+w+9,outy+(outh/2)+1,0)
                        //draw_path(path[i],x,y,1)
                        //draw the arrow
                        if objControl.op0[1]=true{
                            var p=.5,it=0;
                            var xx1,yy1,xx2,yy2;
                            
                            xx1=path_get_x(path[i],p-.01)
                            yy1=path_get_y(path[i],p-.01)
                            xx2=path_get_x(path[i],p+.01)
                            yy2=path_get_y(path[i],p+.01)
                            draw_sprite_ext(sprArrow,convo!=-1,xx2+1,yy2+1,.5,1,
                            point_direction(ceil(xx1-1),ceil(yy1-1),ceil(xx2-1),ceil(yy2-1))+270,c_white,1)
                        }
                        
                    }else{
                        //event_user(0)
                        draw_line(x+w,outy+(outh/2),out[i].x,out[i].outy+(out[i].outh/2))
                        if objControl.op0[1]=true{
                            draw_arrow(x+w,outy+(outh/2),lerp(out[i].x,x+w,0.5),lerp(out[i].outy+(out[i].outh/2),outy+(outh/2),0.5),15)
                        }
                    }
                }else{
                    draw_line(x+w,outy+(outh/2),out[i].x,out[i].outy+(out[i].outh/2))
                    if objControl.op0[1]=true{
                        draw_arrow(x+w,outy+(outh/2),lerp(out[i].x,x+w,0.5),lerp(out[i].outy+(out[i].outh/2),outy+(outh/2),0.5),15)
                    }
                }
                
            }else{
                //out[i]=-1
            }
            if !instance_exists(objNPC) &amp;&amp; instance_exists(out[i]){
                //deleteOut
                if objControl.op0[0]=false{
                    if collision_line(x+w,outy+(outh/2),out[i].x,out[i].outy+(out[i].outh/2),objMouse,0,1)!=noone
                    &amp;&amp; global.dragOutNode=false{
                        draw_set_color(c_red)
                        draw_line_width(mouse_x-6,mouse_y-6,mouse_x+6,mouse_y+6,3)
                        draw_line_width(mouse_x+6,mouse_y-6,mouse_x-6,mouse_y+6,3)
                        if convo=-1{draw_set_color(c_dkgray)}else{draw_set_color(c_ltgray)}
                        if mouse_check_button_released(mb_left) &amp;&amp; scr_checkMouseInterface(){
                            with(out[i]){
                                //in[other.i]=-1
                                for(var _a=0;_a&lt;15;_a++){
                                    if in[_a]=other.id{
                                        in[_a]=-1
                                    }
                                }
                            }
                            out[i].alphaCheck=true
                            out[i].convo=-1
                            alphaCheck=true
                            out[i]=-1
                            convo=-1
                            if instance_exists(objConvo){with(objConvo){create=1}}
                            
                        }
                    }
                }else{//PathFinding Delete
                    for(a=1;a&lt;path_get_number(path[i]);a++){
                        if collision_line(path_get_point_x(path[i],a-1),path_get_point_y(path[i],a-1)
                        ,path_get_point_x(path[i],a),path_get_point_y(path[i],a),objMouse,0,1)!=noone
                        &amp;&amp; global.dragOutNode=false{
                            draw_set_color(c_red)
                            draw_line_width(mouse_x-6,mouse_y-6,mouse_x+6,mouse_y+6,3)
                            draw_line_width(mouse_x+6,mouse_y-6,mouse_x-6,mouse_y+6,3)
                            if convo=-1{draw_set_color(c_dkgray)}else{draw_set_color(c_ltgray)}
                            if mouse_check_button_released(mb_left) &amp;&amp; scr_checkMouseInterface(){
                                with(out[i]){
                                    //in[other.i]=-1
                                    for(var _a=0;_a&lt;15;_a++){
                                        if in[_a]=other.id{
                                            in[_a]=-1
                                        }
                                    }
                                }
                                out[i].alphaCheck=true
                                out[i].convo=-1
                                alphaCheck=true
                                out[i]=-1
                                convo=-1
                                if instance_exists(objConvo){with(objConvo){create=1}}
                            }
                        }
                    }//for()
                }//else
            }//!instance_exists(objNPC)
        }//out[i]!=-1
    }//for
    
    
    }//scrNodeInViewConnection
    
    
    
    //outLine
    if outDrag2=true{
        draw_line(x+w,outy+(outh/2),mouse_x,mouse_y)
        draw_arrow(x+w,outy+(outh/2),lerp(mouse_x,x+w,.5),lerp(mouse_y,outy+(outh/2),0.5),15)
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawConvo

if getConvo{
    
    
    draw_set_color(c_white)
    draw_circle(mouse_x,mouse_y,5,false)
    
    if mouse_check_button_released(mb_left){
        getConvo=false
        with(objNPC){instance_destroy()}
        nn=-1;
        with(objNode){
            if scr_hover(x,y,x+w,y+h){
                other.nn=id;
                break;
            }
        }
        
        if nn!=-1 &amp;&amp; nn.convo=-1{
            
            convCount++
            
            dd=instance_create(0,0,objConvo)
            dd.connect=nn
            dd.depth=convCount
            dd.pid=convCount
            dd.select0=1
            
            nn.convo=dd
            
            global.createPopDisplay=false
            with(objNode){
                select=false
                for(var i=0;i&lt;switchCount;i++){select0[i]=0}
            }
            
        }
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawSelect
if dragT=true{
    draw_set_color(c_ltgray)
    draw_set_alpha(0.5)
    draw_rectangle(dragX,dragY,mouse_x,mouse_y,false)
    draw_set_color(c_black)
    draw_rectangle(dragX-1,dragY-1,mouse_x,mouse_y,true)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Convo
if instance_exists(objConvo){
    with(objConvo){
        event_user(0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
