<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNPC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
showText=false;
showText2=true;
pid=-1;
alarm[0]=1;              //queues to load in the NPC

dialougeSprite=-1;       //the image of the NPC
dialougeSpritePERM=-1;   //The permanent image of the NPC
dialougeTalk=0;          //toggled b/w 1,0 for talking effect
dialougeTextOn=0;        //typewriter effect
textSpeed=1;             //speed at which text typwriter effect goes. Change be changed with [speed=x] tags
textWaveA=0               //Wave amplitude. example:[waveA=5]
textWaveF=0               //Wave frequency. example:[waveF=1]
textWaveO=0               //Wave offset per character. example:[waveO=1]
textShakeX=0              //Shake amount in X direction. example:[shakeX=3]
textShakeY=0              //Shake amount in Y direction. example:[shakeY=2]
textShake=0               //Shake amount in both X+Y.    example:[shake=4]
textHSV=0                 //Rate at which the color shifts example: [hsv=0.1]
textHSV1=0                 //current hsv shift value
name="";                 //name of the NPC
namePERM="";             //Permament name of NPC

_time=0                  //Used as an internal clock for the wave, and shake effects


//Default values for text effects
defaultMap=ds_map_create()
ds_map_add(defaultMap,"textSpeed",1)
ds_map_add(defaultMap,"textColor","white")
ds_map_add(defaultMap,"textAlpha",1)
ds_map_add(defaultMap,"textFont","fnt_default")
ds_map_add(defaultMap,"textWaveA",0)
ds_map_add(defaultMap,"textWaveF",0)
ds_map_add(defaultMap,"textWaveO",0)
ds_map_add(defaultMap,"textShakeX",0)
ds_map_add(defaultMap,"textShakeY",0)
ds_map_add(defaultMap,"textShake",0)
ds_map_add(defaultMap,"textHSV",0)





//Setup the variables to hold the NPC lines
/*
    on0, and on1 store the position that the dialog is in.
    When you click the "continue" button, on0 will be incremented by 1
    When you click on an option, on0 will be reset to 0, and on1 will change
    If you want to know the string that the NPC is currently saying, just use this: line[on0,on1]
*/
on0=0;
on1=0;
for(i=0;i&lt;255;i++){
    for(a=0;a&lt;50;a++){
        line[i,a]="";//text
        op0[i,a]=-1;//ds_list - stores which dialog it will jump to (eg: 1,0)
        op1[i,a]=-1;//ds_list - stores text options (eg: "Who are you?")
    }
}



//checkList-- for jumping dialogue trees
/*
    These lists are filled up with the "convo(QuestID,QuestStep)" information
    If quest[0]==1, and you have a "convo(0,1)" in your dialog, then it will automatically jump
        to the first Node in that tree
*/
checkAmount=0;//amount of "convo(QuestID,QuestStep)" you have in your dialog tree
for(i=0;i&lt;100;i++){
    checkQuest[i]=-1;    //QuestID to check
    checkON[i]=-1;       //Quest Step to check
    checkText0[i]=-1;    //Equivalent to on0
    checkText1[i]=-1;    //Equivalent to on1
}

/*
    An easier solution than the "convo" system!
    All you need to do is set "label(str)" in the script nodes,
        and then you can jump to them by doing "goto(str)"
*/
//lbl + goto
lblAmount=0;
for(i=0;i&lt;100;i++){
    lbl[i]=-1
    lblText0[i]=-1
    lblText1[i]=-1
}


chatMap=ds_map_create() //Map used for [var=xxx] tag!

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chatbox Info

chatSelect=0//this is used for the UP/Down arrow key selection

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///!!!Very Important!!! - LoadText
if pid=-1{
    //No pid assigned!
    show_debug_message("NPC Creation Failed: No PID assigned!")
    instance_destroy() exit
}

if load_npcChat(pid)=1{
    show_debug_message("Loaded NPC: "+string(pid))
}else{
    show_debug_message("Failed to load NPC: "+string(pid))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clock
_time++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CollisionWithPlayer


if showText2=true{
    if place_meeting(x,y,objPlayer){
        showText=true
    }else{
        showText=false
    }
}else{
    showText=false
    if keyboard_check_released(vk_space)
    &amp;&amp; place_meeting(x,y,objPlayer){
        showText2=true
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DistanceToPlayer

/*
var nn=instance_nearest(x,y,objPlayer);
if showText2=true{
    if point_distance(x,y,nn.x,nn.y)&lt;50{
        showText=true
    }else{
        showText=false
    }
}else{
    showText=false
    if keyboard_check_released(vk_space)
    &amp;&amp; point_distance(x,y,nn.x,nn.y)&lt;50{
        showText2=true
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///textBox - Default
//draw the TextBox

if showText=true{
    
    //Where the box is positioned on screen
    var xx,yy,ww,hh;
    xx=global.chatX
    yy=global.chatY
    ww=global.chatW
    hh=global.chatH
    
    
    //Draw the main box
    draw_set_alpha(1)
    draw_set_font(fnt_chat)
    draw_set_alpha(0.8)
    draw_set_color(c_dkgray)
    draw_rectangle(xx,yy,xx+ww,yy+hh,false)
    draw_set_alpha(1)
    draw_set_color(c_black)
    draw_rectangle(xx,yy,xx+ww,yy+hh,true)
    
    
    //Draw the Face Sprite
    if dialougeSprite!=-1 &amp;&amp; sprite_exists(dialougeSprite){
        draw_sprite_stretched(dialougeSprite,dialougeTalk,xx+5,yy+(hh/2)-(16),32,32)
    }else{
        draw_sprite_stretched(sprNPCUnkown,0,xx+5,yy+(hh/2)-(16),32,32)
    }
    
    //Draw the Name
    draw_set_halign(fa_center)
    draw_set_color(c_black)
    draw_text(xx+5+16+1,yy+(hh/2)+(sprite_get_height(dialougeSprite)/2)+1,name)
    draw_set_color(c_white)
    draw_text(xx+5+16,yy+(hh/2)+(sprite_get_height(dialougeSprite)/2),name)
    
    xx+=32 ww-=32
    
    
    //Draw the Main Line
    draw_set_halign(fa_center)
    draw_set_color( c_black );
    
    
    //Get the text from the line(on0,on1) and remove all the scripts attached to it
    var str="";
    var p=string_pos("|",line[on0,on1]);
    if p=0{
        str=line[on0,on1]
    }else{
        str=string_copy(line[on0,on1],1,p-1)
    }
    
    //typewriter effect
    if dialougeTextOn&lt;string_length(str){
        dialougeTextOn+=textSpeed
        
        //find end of tags-- so it doesn't temporarily display something like,
            //"[spee..." while doing the typewriter effect
        if string_copy(str,dialougeTextOn-1,1)=="["{
            while(string_copy(str,dialougeTextOn-1,1)!="]"
                &amp;&amp; !(dialougeTextOn&gt;string_length(str))){
                dialougeTextOn++
            }
        }
        
        if dialougeTextOn%3==0{
            dialougeTalk=!dialougeTalk
        }
        
    }else{dialougeTalk=0}
    
    //dialougeTextOn=string_length(str)//used to not have the type writer effect
    var _str=string_copy(str,1,dialougeTextOn);
    //Remove the scripts attached the the end
    
    //Draw the Main Lines
    draw_text_bb_ext_centered_shadow(xx+(ww/2),yy+15,_str,25,ww-5)
    draw_set_halign(fa_center)
    
    
    
    
    
    
    //OPTIONS
    if ds_exists(op0[on0,on1],ds_type_list) &amp;&amp; ds_list_size(op0[on0,on1])&gt;0{
        var _yy=yy+(string_height_ext(line[on0,on1],25,ww-xx)+30);
        
         //Up/Down controls
        if global.chatArrow==true{
            chatSelect+=keyboard_check_released(global.chatArrowDown)-keyboard_check_released(global.chatArrowUp)
            chatSelect=clamp(chatSelect,0,ds_list_size(op0[on0,on1])-1)
        }
        
        
        //Loops through the ds_list and draws every option
        for(i=0;i&lt;ds_list_size(op0[on0,on1]);i++){
        
            
            if global.chatKeyboard==true{
                //Check if the user selected the option with the keyboard
                if keyboard_check_released(ord(string(i+1))){
                   scrNPCCDialogOption(i)
                       dialougeTextOn=0//reset the typewriter 1effect
                       Dialogue_Line_Offset=0; // Reset line offset
                   break;
                }
            }
            
            
        
            //If the user is NOT hovering over the option
            if (!scr_GUIhover(xx+5,_yy,xx+ww-5,_yy+19) &amp;&amp; global.chatArrow==false)
            || (global.chatArrow==true &amp;&amp; chatSelect!=i){
                draw_text_shadow_color(xx+(ww/2),_yy,
                ds_list_find_value(op0[on0,on1],i),merge_color(c_blue,c_aqua,0.5))
            }else{
                //If the user IS hovering
                
                if (mouse_check_button(mb_left) &amp;&amp; global.chatArrow==false)
                || (global.chatArrow==true &amp;&amp; keyboard_check(global.chatContinueButton)){
                    draw_text_shadow_color(xx+(ww/2),_yy,ds_list_find_value(op0[on0,on1],i),c_white)
                }else{
                    draw_text_shadow_color(xx+(ww/2),_yy,ds_list_find_value(op0[on0,on1],i),c_ltgray)
                }
                
                //Execute the dialog jumping!
                if (mouse_check_button_released(mb_left) &amp;&amp; global.chatArrow==false)
                || (global.chatArrow==true &amp;&amp; keyboard_check_released(global.chatContinueButton)){
                    scrNPCCDialogOption(i)
                    dialougeTextOn=0//reset the typewriter effect
                    break;
                }
            }
            
            
            _yy+=20
        }
        
    }else{
        //Draw the "Continue" button
        
        ///////////////////////Keyboard///////////////////////
        if ((global.chatKeyboard || global.chatArrow)){
            if !keyboard_check(global.chatContinueButton){
                draw_text_shadow_color(xx+(ww/2),yy+hh-20,"Click here to continue",merge_color(c_blue,c_aqua,0.5))
            }else{
                draw_text_shadow_color(xx+(ww/2),yy+hh-20,"Click here to continue",c_white)
            }
            if keyboard_check_released(global.chatContinueButton){
                if dialougeTextOn&lt;string_length(str){
                    //If it is NOT, finish it
                    dialougeTextOn=string_length(str)
                }else{
                    //If it IS, continue
                    scrNPCDialogContinue()
                    dialougeTextOn=0//reset the typewriter effect
                }
            }
        }
        
        else{
            ///////////////////////Hover///////////////////////
            if !scr_GUIhover(xx+5,yy+hh-25,xx+ww-5,yy+hh){
                draw_text_shadow_color(xx+(ww/2),yy+hh-20,"Click here to continue",merge_color(c_blue,c_aqua,0.5))
            }else{
                if mouse_check_button(mb_left){
                    draw_text_shadow_color(xx+(ww/2),yy+hh-20,"Click here to continue",c_white)
                }else{
                    draw_text_shadow_color(xx+(ww/2),yy+hh-20,"Click here to continue",c_ltgray)
                }
                //Checks to see if the typewriter effect is done
                if mouse_check_button_released(mb_left){
                    if dialougeTextOn&lt;string_length(str){
                        //If it is NOT, finish it
                        dialougeTextOn=string_length(str)
                    }else{
                        //If it IS, continue
                        scrNPCDialogContinue()
                        dialougeTextOn=0//reset the typewriter effect
                    }
                    
                }//mouse_checkc_button_released
            }//else - !scr_GUIhover
            
        
        }
        
    }//else 
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///textBox--Alternative Style
/*
    Just comment out the other one, and uncomment this one to try it yourself!
*/
/*

if showText=true{
    var xx,yy,ww,hh;
    xx=global.gui_width-672 yy=global.gui_height-160  ww=382 hh=96
    
    //Draw the box
    draw_set_alpha(0.70)
    draw_set_color(c_black)
    draw_rectangle(xx, yy, xx+ww, yy+hh, false)
    draw_set_alpha(1)
    
    //Draw the Name
    draw_set_valign(fa_top)
    draw_set_halign(fa_center)
    draw_set_font(fnt_chat)
    draw_text_shadow_color(xx+34,yy+10,name, c_aqua)
    xx+=32 ww-=32

    //Draw the Main Line
    var p=string_pos("|",line[on0,on1]);//Get rid of the commands
    
    var str="";
    if p=0{
        str=line[on0,on1]
    }else{
        str=string_copy(line[on0,on1],1,p-1)
    }
    
    //typewriter effect
    if dialougeTextOn&lt;string_length(str){
        dialougeTextOn+=textSpeed
        //find end of tags-- so it doesn't temporarily display something like,
            //"[spee..." while doing the typewriter effect
        if string_copy(str,dialougeTextOn-1,1)=="["{
            while(string_copy(str,dialougeTextOn-1,1)!="]"
                &amp;&amp; !(dialougeTextOn&gt;string_length(str))){
                dialougeTextOn++
            }
        }
        if dialougeTextOn%3==0{
            dialougeTalk=!dialougeTalk
        }
        
    }else{dialougeTalk=0}
    
    str=string_copy(str,1,dialougeTextOn)
    draw_text_bb_ext_centered_shadow(xx+(ww/2)-8,yy+28,str,20,ww-44, c_black, c_white)
    
    
    //Draw options
    if ds_exists(op0[on0,on1],ds_type_list) &amp;&amp; ds_list_size(op0[on0,on1])&gt;0{
        var _yy=yy+(string_height_ext(line[on0,on1],25,ww)+60);
        for(i=0;i&lt;ds_list_size(op0[on0,on1]);i++){
            if !scr_GUIhover(xx-32,_yy,xx+ww,_yy+24){
                draw_set_alpha(0.70)
                draw_set_color(c_black)
                draw_rectangle(xx-32, _yy, xx+ww, _yy+20, false)
                draw_text_shadow_color(xx+(ww/2),_yy,
                ds_list_find_value(op0[on0,on1],i),merge_color(c_blue,c_aqua,0.5))
            }else{
                if mouse_check_button(mb_left){
                    draw_set_alpha(0.70)
                    draw_set_color(merge_color(c_dkgray, c_black, 0.75))
                    draw_rectangle(xx-32, _yy, xx+ww, _yy+20, false)
                    draw_text_shadow_color(xx+(ww/2),_yy,
                    ds_list_find_value(op0[on0,on1],i),merge_color(c_blue,c_aqua,0.5))
                }else{
                    draw_set_alpha(0.70)
                    draw_set_color(merge_color(c_dkgray, c_black, 0.5))
                    draw_rectangle(xx-32, _yy, xx+ww, _yy+20, false)
                    draw_text_shadow_color(xx+(ww/2),_yy,
                    ds_list_find_value(op0[on0,on1],i),merge_color(c_blue,c_aqua,0.5))
                }
                
                if mouse_check_button_released(mb_left){
                    scrNPCCDialogOption(i)
                    dialougeTextOn=0
                    break;
                }
            }
            _yy+=24
        }
    }else{
        //draw the Continue button
        if !scr_GUIhover(xx-32, yy+hh+4, xx+ww, yy+hh+24){
            draw_set_alpha(0.70)
            draw_set_color(c_black)
            draw_rectangle(xx-32, yy+hh+4, xx+ww, yy+hh+24, false)
            draw_text_shadow_color(xx+(ww/2)-16,yy+hh+6,"Click here to continue",merge_color(c_blue,c_aqua,0.5))
        }else{
            if mouse_check_button(mb_left){
                draw_set_alpha(0.70)
                draw_set_color(merge_color(c_dkgray, c_black, 0.75))
                draw_rectangle(xx-32, yy+hh+4, xx+ww, yy+hh+24, false)
                draw_text_shadow_color(xx+(ww/2)-16,yy+hh+6,"Click here to continue",merge_color(c_blue,c_aqua,0.5))
            }else{
                draw_set_alpha(0.70)
                draw_set_color(merge_color(c_dkgray, c_black, 0.5))
                draw_rectangle(xx-32, yy+hh+4, xx+ww, yy+hh+24, false)
                draw_text_shadow_color(xx+(ww/2)-16,yy+hh+6,"Click here to continue",merge_color(c_blue,c_aqua,0.5))
            }
            if mouse_check_button_released(mb_left){
                if dialougeTextOn&lt;string_length(str){
                    dialougeTextOn=string_length(str)
                }else{
                    scrNPCDialogContinue()
                    dialougeTextOn=0
                }
            }
        }
    }
}

draw_set_alpha(1)
draw_set_color(c_white)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawSelf
draw_self()

if showText2=false &amp;&amp; showText=false
&amp;&amp; place_meeting(x,y,objPlayer){
    draw_set_alpha(1)
    draw_set_color(c_black)
    draw_set_font(fnt_chat)
    draw_text(x,y+50,"Press Space to talk")
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
